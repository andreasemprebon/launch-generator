from lxml import etree
import datetime

# Creo il launch file
generated_on = str( datetime.datetime.now() )

launch_file_root = etree.Element('launch')
launch_file_root.addprevious( etree.Comment('Generated by EverROS automatically on' + generated_on) )

print()

# Leggo il file XML generato dal backend ever_xml
tree = etree.parse('../ocarina-ros/container.tlk_lis_ever_xml.xml')

# Ottengo la root del system preso in considerazione
root = tree.getroot()

# Siccome sono già in un system, devo cercare tutti i subcomponent di tipo
# process, visto che ognuno di questo andrà poi ad avviare un nodo ROS
processes = root.findall("./subcomponents/component/[category='process']")

# Creo una entry nel launch file per ogni process
for process in processes:
    name        = process.find('name').text
    type        = process.find('type').text
    namespace   = process.find('namespace').text

    launch_node_properties = {  'name'  : name,
                                'pkg'   : namespace,
                                'type'  : type  }
    new_launch_node = etree.SubElement(launch_file_root, 'node', launch_node_properties)


    print(name, type, namespace)

launch_file_content = etree.tostring(launch_file_root, pretty_print = True, encoding = 'unicode' )

# Aggiungo commenti all'inizio del file
comments = [ etree.Comment(' Generated by EverROS automatically on ' + generated_on + ' ') ]

comments_content = ''
for comment in comments:
    c = etree.tostring(comment, pretty_print = True, encoding = 'unicode')
    comments_content += c

final_content = "{}{}".format(comments_content, launch_file_content)
out_file = open("launch_file.launch", "w")
out_file.write( final_content )
out_file.close()